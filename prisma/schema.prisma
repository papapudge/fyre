// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication Models
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  role          UserRole  @default(FIELD_RESPONDER)
  badgeNumber   String?   @unique
  phone         String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  personnel     Personnel?
  incidentLogs  IncidentLog[]
  assignments   Assignment[]
  notifications Notification[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Personnel Management
model Personnel {
  id                String        @id @default(cuid())
  userId            String        @unique
  rank              String?
  certifications    String[]      @default([])
  qualifications    String[]      @default([])
  hireDate          DateTime?
  stationId         String?
  status            PersonnelStatus @default(OFF_DUTY)
  currentAssignment String?
  emergencyContact  String?
  medicalInfo       String?
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  station           Station?      @relation(fields: [stationId], references: [id])
  assignments       Assignment[]
  incidentLogs      IncidentLog[]

  @@map("personnel")
}

// Station/Facility Management
model Station {
  id          String   @id @default(cuid())
  name        String
  address     String
  latitude    Float
  longitude   Float
  phone       String?
  email       String?
  capacity    Int?
  isActive    Boolean  @default(true)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  personnel   Personnel[]
  vehicles    Vehicle[]
  hydrants    Hydrant[]
  incidents   Incident[]

  @@map("stations")
}

// Vehicle/Apparatus Management
model Vehicle {
  id              String        @id @default(cuid())
  unitId          String        @unique
  type            VehicleType
  name            String
  stationId       String
  status          VehicleStatus @default(OUT_OF_SERVICE)
  latitude        Float?
  longitude       Float?
  lastLocationUpdate DateTime?
  fuelLevel       Float?
  capabilities    String[]      @default([])
  lastService     DateTime?
  nextService     DateTime?
  notes           String?
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  station         Station       @relation(fields: [stationId], references: [id])
  assignments     Assignment[]
  incidentLogs    IncidentLog[]

  @@map("vehicles")
}

// Hydrant/Water Source Management
model Hydrant {
  id              String      @id @default(cuid())
  hydrantId       String      @unique
  stationId       String?
  latitude        Float
  longitude       Float
  flowRate        Float?
  pressure        Float?
  capacity        Float?
  lastInspection  DateTime?
  nextInspection  DateTime?
  accessibility   String?
  status          HydrantStatus @default(UNKNOWN)
  notes           String?
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  station         Station?    @relation(fields: [stationId], references: [id])

  @@map("hydrants")
}

// Incident Management
model Incident {
  id              String          @id @default(cuid())
  incidentNumber  String          @unique
  type            IncidentType
  severity        IncidentSeverity
  status          IncidentStatus  @default(ACTIVE)
  title           String
  description     String?
  latitude        Float
  longitude       Float
  address         String?
  stationId       String?
  callerName      String?
  callerPhone     String?
  reportedAt      DateTime        @default(now())
  dispatchedAt    DateTime?
  arrivedAt       DateTime?
  containedAt     DateTime?
  closedAt        DateTime?
  estimatedLoss   Float?
  injuries        Int             @default(0)
  fatalities      Int             @default(0)
  cause           String?
  weather         String?
  notes           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  station         Station?        @relation(fields: [stationId], references: [id])
  logs            IncidentLog[]
  evidence        Evidence[]
  assignments     Assignment[]

  @@map("incidents")
}

model IncidentLog {
  id          String      @id @default(cuid())
  incidentId  String
  userId      String
  personnelId String?
  vehicleId   String?
  action      String
  description String?
  timestamp   DateTime    @default(now())
  latitude    Float?
  longitude   Float?

  // Relations
  incident    Incident    @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id])
  personnel   Personnel?  @relation(fields: [personnelId], references: [id])
  vehicle     Vehicle?    @relation(fields: [vehicleId], references: [id])

  @@map("incident_logs")
}

model Evidence {
  id          String      @id @default(cuid())
  incidentId  String
  type        EvidenceType
  filename    String
  originalName String
  mimeType    String
  size        Int
  url         String
  description String?
  uploadedBy  String
  uploadedAt  DateTime    @default(now())

  // Relations
  incident    Incident    @relation(fields: [incidentId], references: [id], onDelete: Cascade)

  @@map("evidence")
}

// Assignment Management
model Assignment {
  id          String            @id @default(cuid())
  incidentId  String
  userId      String
  personnelId String?
  vehicleId   String?
  role        AssignmentRole
  status      AssignmentStatus  @default(ASSIGNED)
  assignedAt  DateTime          @default(now())
  acceptedAt  DateTime?
  completedAt DateTime?
  notes       String?

  // Relations
  incident    Incident          @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  user        User              @relation(fields: [userId], references: [id])
  personnel   Personnel?        @relation(fields: [personnelId], references: [id])
  vehicle     Vehicle?          @relation(fields: [vehicleId], references: [id])

  @@map("assignments")
}

// Notification System
model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum UserRole {
  ADMIN
  CC_OPERATOR
  FIELD_RESPONDER
}

enum PersonnelStatus {
  ON_DUTY
  OFF_DUTY
  EN_ROUTE
  ON_SCENE
  UNAVAILABLE
}

enum VehicleType {
  ENGINE
  LADDER
  RESCUE
  AMBULANCE
  HAZMAT
  COMMAND
  TANKER
  BRUSH
  OTHER
}

enum VehicleStatus {
  IN_SERVICE
  OUT_OF_SERVICE
  EN_ROUTE
  ON_SCENE
  MAINTENANCE
}

enum HydrantStatus {
  ACTIVE
  INACTIVE
  DAMAGED
  UNKNOWN
}

enum IncidentType {
  FIRE
  MEDICAL
  RESCUE
  HAZMAT
  FALSE_ALARM
  SERVICE_CALL
  OTHER
}

enum IncidentSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IncidentStatus {
  ACTIVE
  DISPATCHED
  ON_SCENE
  CONTAINED
  CLOSED
  CANCELLED
}

enum EvidenceType {
  PHOTO
  VIDEO
  DOCUMENT
  AUDIO
  OTHER
}

enum AssignmentRole {
  COMMAND
  FIREFIGHTER
  PARAMEDIC
  DRIVER
  OBSERVER
  SUPPORT
}

enum AssignmentStatus {
  ASSIGNED
  ACCEPTED
  EN_ROUTE
  ON_SCENE
  COMPLETED
  CANCELLED
}

enum NotificationType {
  INCIDENT_DISPATCH
  INCIDENT_UPDATE
  ASSIGNMENT
  SYSTEM_ALERT
  MAINTENANCE_REMINDER
  GENERAL
}